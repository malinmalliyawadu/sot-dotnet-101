@page "/"
@inject HttpClient Http

<PageTitle>Fifa Team Builder</PageTitle>

<Header>Fifa Team Builder ⚽</Header>

<div class="flex gap-10">
    <div class="w-6/12">
        <div class="flex justify-between">
            <SectionTitle>Available players</SectionTitle>
            <div class="form-group items-end">
                <input class="rounded-full drop-shadow-lg border-slate-600 pl-5 bg-opacity-40 bg-white"
                    type="text"
                    placeholder="Search..."
                    @bind="search"
                    @bind:event="oninput">
            </div>
        </div>
        <Table>
            <thead>
                <tr>
                    <HeaderCell></HeaderCell>
                    <HeaderCell>Name</HeaderCell>
                    <HeaderCell>Position</HeaderCell>
                    <HeaderCell>Country</HeaderCell>
                    <HeaderCell></HeaderCell>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in allTeams.SelectMany(team => team.Players))
                {
                    if(!IsVisible(player))
                    {
                        continue;
                    }
                    <tr>
                        <BodyCell><img class="w-28" src="@player.PlayerPicture.PictureUrl" /></BodyCell>
                        <BodyCell>@player.PlayerName.First().Description</BodyCell>
                        <BodyCell>@player.RealPositionLocalized.First().Description</BodyCell>
                        <BodyCell>@player.Country</BodyCell>
                        <BodyCell><Button OnClick="() => AddPlayer(player)">+ Add</Button></BodyCell>
                    </tr>
                }
            </tbody>
        </Table>
    </div>

    <div class="w-6/12">
        <SectionTitle>Dream team</SectionTitle>
        <Table>
            <thead>
                <tr>
                    <HeaderCell></HeaderCell>
                    <HeaderCell>Name</HeaderCell>
                    <HeaderCell>Position</HeaderCell>
                    <HeaderCell>Country</HeaderCell>
                    <HeaderCell></HeaderCell>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in dreamTeamPlayers)
                {
                    <tr>
                        <BodyCell><img class="w-28" src="@player.PlayerPicture.PictureUrl" /></BodyCell>
                        <BodyCell>@player.PlayerName.First().Description</BodyCell>
                        <BodyCell>@player.RealPositionLocalized.First().Description</BodyCell>
                        <BodyCell>@player.Country</BodyCell>
                        <BodyCell><Button OnClick="() => RemovePlayer(player)">🗑 Remove</Button></BodyCell>
                    </tr>
                }
            </tbody>
        </Table>
    </div>
</div>

@code {
    private string search { get; set; }
    private List<Team> allTeams = new();
    private List<Player>  dreamTeamPlayers = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(Constants.Countries.Select(async country => {
            var team = await Http.GetFromJsonAsync<Team>($"https://api.fifa.com/api/v3/teams/{country.Value}/squad?idCompetition=103&idSeason=285026&language=en");
            team.Players.ForEach(player => 
            {
                player.Country = team.TeamName.First().Description;
            });
            allTeams.Add(team);
        }));
    }

    private void AddPlayer(Player player)
    {
        if (!dreamTeamPlayers.Any(x => x.IdPlayer == player.IdPlayer))
        {
            dreamTeamPlayers.Add(player);
        }
    }

    private void RemovePlayer(Player player)
    {
        dreamTeamPlayers.Remove(player);
    }

    public bool IsVisible(Player player)
    {
        if (string.IsNullOrEmpty(search))
            return true;
    
        if (player.PlayerName.First().Description.Contains(search, StringComparison.OrdinalIgnoreCase))
            return true;

        if (player.RealPositionLocalized.First().Description.Contains(search, StringComparison.OrdinalIgnoreCase))
            return true;

        if (player.Country.Contains(search, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
